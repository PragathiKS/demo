@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    environment {
        build_id_number = ""
        boolean build_commons = false
        boolean build_pubweb = false
        boolean build_mtp = false
        boolean build_tlaval = false
        boolean build_supplier = false
    }

    stages {
        stage('Identify Build Scope') {
            steps {
                script {
                    def GIT_DIFF = sh (
                        script: 'git diff --name-only HEAD HEAD~1',
                        returnStdout: true
                    ).trim()
                    echo "${GIT_DIFF}"
                    build_mtp = GIT_DIFF.contains('tetrapak-customerhub')
                    build_pubweb = GIT_DIFF.contains('tetrapak-publicweb') 
                    build_tlaval = GIT_DIFF.contains('tetra-laval')
                    build_supplier = GIT_DIFF.contains('tetrapak-supplierportal')
                    if (GIT_DIFF.contains('tetrapak-commons')) {
                        build_commons = true
                        build_pubweb = true
                        build_mtp = true
                        build_tlaval = true
                        build_supplier = true
                    }
                }
            }
        }
        stage('Build & Test Projects') {
            when { 
                beforeAgent true
                anyOf {
                    expression { return build_commons == true }
                    expression { return build_pubweb == true }
                    expression { return build_mtp == true }
                    expression { return build_tlaval == true }
                    expression { return build_supplier == true }
                }
            } 
            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2 --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                }
            }
            failFast true
            steps {
                script {
                    def now = new Date()
                    def formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
		        }
                
                script {
                    if (build_commons == true) {
                        build(appname: "commons")
                    }
                    
                    parallel(
                        "Build Customerhub": {
                            if (build_mtp == true) {
                                build(appname: "customerhub")
                            }
                        },
                        "Build Publicweb": {
                            if (build_pubweb == true) {
                                build(appname: "publicweb")
                            }
                        },
                        "Build Supplierportal": {
                            if (build_supplier == true) {
                                build(appname: "supplierportal")
                            }
                        },
                        "Build Tetralaval": {
                            if (build_tlaval == true) {
                                buildlaval()
                            }
                        }
                    )
                }
            }
            post {
                cleanup {
                    sh label: "clean log4j from .m2 cache", script: "rm -rf ~/.m2/repository/log4j/*"
                    sh "sudo git gc --force"
                }
            }
        }
    }
}

def build(Map map) {
    dir("tetrapak-${map.appname}") {
        sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
        sh "npm cache clean --force"                    
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']]) {                       
            sh label: "Build ${map.appname}", script: "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            junit testResults: "ui.dev/src/coverage/*karma-report.xml", healthScaleFactor: 10.0
        }
    }
}

def buildlaval() {
    dir("tetra-laval") {
        sh "rm -rf ui.frontend/node_modules && rm -rf ui.frontend/package-lock.json"
        sh "npm cache clean --force"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
            sh label:"Build tetra-laval", script: "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            junit testResults: "ui.frontend/src/coverage/*karma-report.xml", healthScaleFactor: 10.0
        }
    }
}
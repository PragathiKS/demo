@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
            customWorkspace "workspace/CFE/${env.JOB_NAME}-${env.BUILD_NUMBER}"
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        build_id_number = ""
        boolean build_commons = false
        boolean build_pubweb = false
        boolean build_mtp = false
        boolean build_tlaval = false
        boolean build_supplier = false
    }

    stages {
        stage('Identify Build Scope') {
            steps {
                script {
                    def GIT_DIFF = sh (
                        script: 'git diff --name-only HEAD HEAD~1',
                        returnStdout: true
                    ).trim()
                    echo "${GIT_DIFF}"
                    build_mtp = GIT_DIFF.contains('tetrapak-customerhub')
                    build_pubweb = GIT_DIFF.contains('tetrapak-publicweb') 
                    build_tlaval = GIT_DIFF.contains('tetra-laval')
                    build_supplier = GIT_DIFF.contains('tetrapak-supplierportal')
                    if (GIT_DIFF.contains('tetrapak-commons')) {
                        build_commons = true
                        build_pubweb = true
                        build_mtp = true
                        build_tlaval = true
                        build_supplier = true
                    }
                }
            }
        }
        stage('Build & Test Projects') {
            when { 
                beforeAgent true
                anyOf {
                    expression { return build_commons == true }
                    expression { return build_pubweb == true }
                    expression { return build_mtp == true }
                    expression { return build_tlaval == true }
                    expression { return build_supplier == true }
                }
            } 
            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2 --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                    reuseNode true
                }
            }
            
            steps {
                script {
                    def now = new Date()
                    def formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
		        }
                
                script {
                    if (build_commons == true) {
                        verify(appname: "commons")
                    } else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						    sh "npm rebuild node-sass"
						}
					}
                    if (build_pubweb == true) {
                        verify(appname: "publicweb")
                    }
                    else !build_pubweb {
                        sh "npm install --prefix tetrapak-publicweb/ui.dev/src"
                    }
                    
                    parallel(
                        "Build Customerhub": {
                            if (build_mtp == true) {
                                verify(appname: "customerhub")
                            }
                        },
                        "Build Supplierportal": {
                            if (build_supplier == true) {
                                verify(appname: "supplierportal")
                            }
                        },
                        "Build Tetralaval": {
                            if (build_tlaval == true) {
                                buildlaval()
                            }
                        }
                    )
                }
            }
        }
    }
    post {
        cleanup {
            sh label: "clean log4j from .m2 cache", script: "sudo rm -rf ~/.m2/repository/log4j/*"
            build job:'CFE/Jenkins-Maintenance-Work',
            parameters: [string(name: 'purge_dirs', value: "${env.WORKSPACE}"), string(name: 'delay', value: '10')],
            wait: false,
            propagate:false
        }
    }
}

def verify(Map map) {
    dir("tetrapak-${map.appname}") {
        sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
        sh "npm cache clean --force"                    
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']]) {                       
            sh label: "Build ${map.appname}", script: "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} verify -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"                         
        }
    }
    publishReports(appname: map.appname)
}

def buildlaval() {
    dir("tetra-laval") {
        sh "rm -rf ui.frontend/node_modules && rm -rf ui.frontend/package-lock.json"
        sh "npm cache clean --force"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
            sh label:"Build tetra-laval", script: "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
        }
    }
    publishReports(appname: "tetra-laval")
}

def publishReports(Map map) {
    def ui_dev_dir_path = (map.appname != 'tetra-laval') ? "ui.dev" : 'ui.frontend'
    def proj_dir = (map.appname != 'tetra-laval') ? "tetrapak-${map.appname}" : map.appname
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false,
                                    keepAll: false, reportDir: "${proj_dir}/${ui_dev_dir_path}/src/coverage",
                                    reportFiles: 'index.html', reportName: "Coverage-Report-${map.appname}",
                                    reportTitles: ''])

    junit testResults: "${proj_dir}/${ui_dev_dir_path}/src/coverage/*karma-report.xml"
    // Surefire Reports
    junit testResults: "${proj_dir}/core/target/surefire-reports/TEST-*.xml"
    // Jacoco Coverage Report
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false,
                            keepAll: false, reportDir: "${proj_dir}/core/target/site/jacoco",
                            reportFiles: 'index.html', reportName: "JaCoco-Coverage-Report-${map.appname}",
                            reportTitles: '']) 
}
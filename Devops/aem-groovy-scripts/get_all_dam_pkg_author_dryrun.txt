import groovy.transform.Field

@Field packagesPath = "/etc/packages/my_packages"
@Field packageName = "tetra-pak-delta-pkg-dam-after-3rd-feb"
@Field packageName2 = "tetra-pak-delta-pkg-dam-after-3rd-feb-replication"
@Field definitionPath = "$packagesPath/${packageName}.zip/jcr:content/vlt:definition"
@Field definitionPath2 = "$packagesPath/${packageName2}.zip/jcr:content/vlt:definition"

def createPackage(){
      def assetSet = [];
      def assetSet1 = [];
      def query = buildQuery();
      def result = query.execute();
        result.nodes.each { node ->
          if(node.getNode("jcr:content").hasProperty("cq:lastReplicated")){
             def replicated = node.getNode("jcr:content").getProperty("cq:lastReplicated").getDate()
             if(replicated.getTime().getDate() > 3 && replicated.getTime().getMonth() > 0 && replicated.getTime().getYear() == 121) {
              assetSet1.add(node.path)
              println "Asset replicated @" + node.path
             }
             else{ 
              assetSet.add(node.path)
              println "Asset added @" + node.path
            }
	   }
           else{ 
            assetSet.add(node.path)
            println "Asset added @" + node.path
           }
          
        }
        def definitionNode1 = getOrAddDefinitionNode1()
        def filterNode1 = getOrAddFilterNode1(definitionNode1)
        
        assetSet.eachWithIndex { path, i ->
         def f1 = filterNode1.addNode("filter$i")
            f1.set("root", path)
        }
        println("Package Created:: " + packageName)

        def definitionNode2 = getOrAddDefinitionNode2()
        def filterNode2 = getOrAddFilterNode2(definitionNode2)
        
        assetSet1.eachWithIndex { path, i ->
         def f2 = filterNode2.addNode("filter$i")
            f2.set("root", path)
        }
        println("Package Created:: " + packageName2)
        //save()

}

def buildQuery() {
    def queryManager = session.workspace.queryManager;
    def statement = '(/jcr:root/content/dam/tetrapak/media-box//element(*, dam:Asset)[((jcr:content/@jcr:lastModified > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))] | /jcr:root/content/dam/tetrapak/products//element(*, dam:Asset)[((jcr:content/@jcr:lastModified > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))] | /jcr:root/content/dam/tetrapak/publicweb//element(*, dam:Asset)[((jcr:content/@jcr:lastModified > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))] | /jcr:root/content/dam/tetrapak/media-box//element(*, dam:Asset)[((@jcr:created > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))] | /jcr:root/content/dam/tetrapak/products//element(*, dam:Asset)[((@jcr:created > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))] | /jcr:root/content/dam/tetrapak/publicweb//element(*, dam:Asset)[((@jcr:created > xs:dateTime(\'2021-02-03T00:00:00.000Z\')))])';
    queryManager.createQuery(statement, 'xpath');
}

def getOrAddDefinitionNode1() {
    def definitionNode1

    if (session.nodeExists(definitionPath)) {
        definitionNode = getNode(definitionPath)
    } else {
        def fileNode = getNode(packagesPath).addNode("${packageName}.zip", "nt:file")

        def contentNode = fileNode.addNode("jcr:content", "nt:resource")

        contentNode.addMixin("vlt:Package")
        contentNode.set("jcr:mimeType", "application/zip")

        def stream = new ByteArrayInputStream("".bytes)
        def binary = session.valueFactory.createBinary(stream)

        contentNode.set("jcr:data", binary)

        definitionNode1 = contentNode.addNode("vlt:definition", "vlt:PackageDefinition")

        definitionNode1.set("sling:resourceType", "cq/packaging/components/pack/definition")
        definitionNode1.set("acHandling", "Overwrite")
        definitionNode1.set("name", packageName)
        definitionNode1.set("path", "$packagesPath/$packageName")
    }

    definitionNode1
}

def getOrAddDefinitionNode2() {
    def definitionNode2

    if (session.nodeExists(definitionPath2)) {
        definitionNode2 = getNode(definitionPath2)
    } else {
        def fileNode = getNode(packagesPath).addNode("${packageName2}.zip", "nt:file")

        def contentNode = fileNode.addNode("jcr:content", "nt:resource")

        contentNode.addMixin("vlt:Package")
        contentNode.set("jcr:mimeType", "application/zip")

        def stream = new ByteArrayInputStream("".bytes)
        def binary = session.valueFactory.createBinary(stream)

        contentNode.set("jcr:data", binary)

        definitionNode2 = contentNode.addNode("vlt:definition", "vlt:PackageDefinition")

        definitionNode2.set("sling:resourceType", "cq/packaging/components/pack/definition")
        definitionNode2.set("acHandling", "Overwrite")
        definitionNode2.set("name", packageName2)
        definitionNode2.set("path", "$packagesPath/$packageName2")
    }

    definitionNode2
}

def getOrAddFilterNode1(definitionNode1) {
    def filterNode1

    if (definitionNode1.hasNode("filter")) {
        filterNode1 = definitionNode1.getNode("filter")

        filterNode1.nodes.each {
            it.remove()
        }
    } else {
        filterNode1 = definitionNode1.addNode("filter")

        filterNode1.set("sling:resourceType", "cq/packaging/components/pack/definition/filterlist")
    }

    filterNode1
}

def getOrAddFilterNode2(definitionNode2) {
    def filterNode2

    if (definitionNode2.hasNode("filter")) {
        filterNode2 = definitionNode2.getNode("filter")

        filterNode2.nodes.each {
            it.remove()
        }
    } else {
        filterNode2 = definitionNode2.addNode("filter")

        filterNode2.set("sling:resourceType", "cq/packaging/components/pack/definition/filterlist")
    }

    filterNode2
}

createPackage();
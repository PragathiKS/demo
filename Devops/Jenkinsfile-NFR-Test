@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
        }
    }
    
    // triggers {
    //     cron('H 1 * * 1-5')
    // }
    
    parameters {
        choice(name: 'Test_Env', choices: ['ALL', 'QA','DEV'], description: 'Select the environment')
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Test_Publicweb'
        booleanParam defaultValue: true, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Test_MyTetraPak'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to execute the pipeline with Accessibility Test', name: 'Pa11y_Execution'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to execute the pipeline with Sitespeed Test', name: 'Sitespeed_Run'
        booleanParam defaultValue: false, description: 'Please uncheck in case you do not want to execute the pipeline with ZAP Test', name: 'ZAP_Run'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Pa11y Execution') {      
            when { expression { return params.Pa11y_Execution } }      
            steps {
                script {
                    echo "Set up Dependencies"
                    sh label: "Install nvm v0.39.3", script: "wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash"
                    sh "export NVM_DIR=\"\$([ -z \"\${XDG_CONFIG_HOME-}\" ] && printf %s \"\${HOME}/.nvm\" || printf %s \"\${XDG_CONFIG_HOME}/nvm\")\"[ -s \"\$NVM_DIR/nvm.sh\" ] && \\. \"\$NVM_DIR/nvm.sh\" && nvm use 20.0.0"
                    
                    dir('Devops') {
                        dir('pa11y') {
                            sh "Clean old reports", script: "sudo rm -rf mtp 2> /dev/null && sudo rm -rf pw  2> /dev/null"
                            sh "sudo rm -rf node_modules 2> /dev/null && sudo rm -f package-lock.json  2> /dev/null "
                            sh label: "initiate node project", script: "npm install"
                        }
                    }
                }
                script {
                    if (params.Test_Env == 'DEV' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Pa11y CuHu DEV - failed with error") {
                                pa11yCuHu(env: 'dev', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Pa11y PubWeb DEV - failed with error") {
                               pa11yPw(env: 'dev')
                            }                
                        }
                    }
                    if (params.Test_Env == 'QA' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Pa11y CuHu DEV - failed with error") {
                                pa11yCuHu(env: 'qa', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Pa11y PubWeb DEV - failed with error") {
                               pa11yPw(env: 'qa')
                            }                
                        }
                    }
                }

            }
        }

        stage('Sitespeed Execution') {      
            when { expression { return params.Sitespeed_Run } }
            steps {
                script {
                    sh label: "Preload Site-speed image", script: 'docker pull sitespeedio/sitespeed.io:27.3.0'
                    if (params.Test_Env == 'DEV' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Sitespeed CuHu DEV - failed with error") {
                                sitespeedCuHu(env: 'dev', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Sitespeed PubWeb DEV - failed with error") {
                               sitespeedpw(env: 'dev')  
                            }                
                        }
                    }
                    if (params.Test_Env == 'QA' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Sitespeed CuHu QA - failed with error") {
                                sitespeedCuHu(env: 'qa', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Sitespeed PubWeb QA - failed with error") {
                                sitespeedpw(env: 'qa')  
                            }                 
                        }
                    }
                }
            } 
        }

        stage('Zap Tools Execution') {        
            steps {
                script {
                    if (params.ZAP_Run) {
                        warnError(message: "Zap Tools Execution failed with error") {
                            zaptest()
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "zap-${appname}", reportFiles: 'zap.html', reportName: "ZAPReport-${appname}", reportTitles: '']) 
                        }           					
                    }
                }
            } 
        }
    }
}

def zaptest() {
    def test_url_pally_zap_pw = "https://www-dev.tetrapak.com/"
    echo "Starting Zap Test Run- ${appname}"
    sh 'sudo docker ps -a'
    sh 'if docker ps | grep zap; then echo "ZAP is running, initiating stop and remove" && sudo docker stop zap && sudo docker rm zap ; else echo "stopped"; fi'
    sh 'docker run --add-host tetrapak-dev65.adobecqms.net:52.142.237.145 -e LANG=C.UTF-8 --detach --name zap -u zap -v "$(pwd)/reports":/zap/reports/:rw owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0  -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true'  
    sleep 30
    echo "Starting ZAP test Run on ${appname} Urls"
    sh "docker exec  zap zap-cli spider ${test_url_pally_zap_pw}"
    sh 'docker exec  zap zap-cli report -f html -o zap.html'
    sh "mkdir -p zap-${appname}"
    sh "docker cp zap:zap/zap.html zap-${appname}"
    sh 'sudo docker stop zap'
    sh 'sudo docker rm zap'
}

def sitespeedCuHu(Map map) {
    def url_list_file_nm = (map.env != 'stage') ? "cuhu_urls_${map.env}.txt" : "sitespeed-mtp-stage-test.mjs"
    def sustainable_args = "--sustainable.enable true --sustainable.model 'swd'"
    def prescript_args = "--preScript sitespeed-mtp-login.mjs --browsertime.test.env '${map.env}'"
    def prescript_credential_arg = "--browsertime.uname '${map.uname}' --browsertime.upass '${map.upass}' "
    def postscript_arg = "--postScript sitespeed-mtp-logout.mjs"
    def multi_arg = (map.env != 'stage') ? "" : "--multi"
    if (map.env != 'stage') {
        sh "cp Devops/PallyUrlsCuhu.txt Devops/sitespeed/${url_list_file_nm}"
        sh "sed -i \"s/dev/${map.env}/g\" Devops/sitespeed/${url_list_file_nm}"
    }
    dir('Devops') {
        dir('sitespeed') {
            def volume_args = "-v \"\$(pwd)\":/sitespeed.io"
            parallel (
                    "Sitespeed-CustomerHub-${map.env}-FireFox-Desktop" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-FireFox-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b firefox --headless true\
                            ${prescript_args}  ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${sustainable_args} ${multi_arg}  ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName, reportTitles: reportName])
                    },
                    "Sitespeed-CustomerHub-${map.env}-Chrome-Desktop" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-Chrome-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b chrome --headless true\
                            ${prescript_args}  ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${sustainable_args} ${multi_arg} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    },
                    "Sitespeed-CustomerHub-${map.env}-IPhone6" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-IPhone6"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'iPhone 6' --headless true\
                            ${prescript_args} ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${multi_arg} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    },
                    "Sitespeed-CustomerHub-${map.env}-Nexus7" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-Nexus7"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'Nexus 7' --headless true\
                            ${prescript_args} ${prescript_credential_arg}  ${postscript_arg}\
                            --outputFolder ${reportDir} ${multi_arg} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    }
            )
        }
    }
} 

def sitespeedpw(Map map) {
    def url_list_file_nm = "pw_urls_${map.env}.txt"
    def sustainable_args = "--sustainable.enable true --sustainable.model 'swd'"
    def prescript_args = "--preScript sitespeed-pw-cookie_consent.mjs --browsertime.test.env '${map.env}'"
    sh "cp Devops/PallyUrlsPublicWeb.txt Devops/sitespeed/${url_list_file_nm}"
    dir('Devops') {
        dir('sitespeed') {
            sh "sed -i \"s/dev/${map.env}/g\" ${url_list_file_nm}"
            def volume_args = "-v \"\$(pwd)\":/sitespeed.io"
            parallel (
                    "Sitespeed-PublicWeb-${map.env}-FireFox-Desktop" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-FireFox-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b firefox --headless true\
                            --outputFolder ${reportDir} ${prescript_args}  ${sustainable_args} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName, reportTitles: reportName])
                    },
                    "Sitespeed-PublicWeb-${map.env}-Chrome-Desktop" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-Chrome-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b chrome --headless true\
                            --outputFolder ${reportDir} ${prescript_args}  ${sustainable_args} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    },
                    "Sitespeed-PublicWeb-${map.env}-IPhone6" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-IPhone6"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'iPhone 6' --headless true\
                            --outputFolder ${reportDir} ${prescript_args} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    },
                    "Sitespeed-PublicWeb-${map.env}-Nexus7" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-Nexus7"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'Nexus 7' --headless true\
                            --outputFolder ${reportDir} ${prescript_args} ${url_list_file_nm}" 
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                                    reportDir: reportDir, reportFiles: 'index.html',
                                    reportName: reportName , reportTitles: reportName])
                    }
            )
        }
    }
}                        

def pa11yCuHu(Map map) {
    dir('Devops') {
        dir('pa11y') {
            sh "sudo mkdir -p mtp/${map.env}"
            def url_list_file_nm = "pa11y-mtp-${map.env}-urls.txt"
            sh label: "Run pa11y test", script: "node index.cjs 'mtp' ${map.env} ${map.uname} ${map.upass} ${url_list_file_nm}"
        }
    }
}

def pa11yPw(Map map) {
    dir('Devops') {
        dir('pa11y') {
            sh "sudo mkdir -p pw/${map.env}"
            def url_list_file_nm = "pa11y-pw-${map.env}-urls.txt"
            sh label: "Run pa11y test", script: "node index.cjs 'pw' ${map.env} ${url_list_file_nm}"
        }
    }
}

def pallycuhuscript() {
    echo "Starting pa11y test Run on CustomerHub Urls"
    reportname = "Pa11y Report - CustomerHub"
    sh 'chmod 777 Devops/PallyReportCuhu.sh'
    sh 'sh -x Devops/PallyReportCuhu.sh'
    sh 'mkdir -p pally-customerHub'
    sh 'mv PallyReportCuhu.html pally-customerHub/PallyReportCuhu.html' 
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-customerHub', reportFiles: 'PallyReportCuhu.html', reportName: 'PallyReport-MyTetraPak', reportTitles: ''])
}

def pallypwscript() {
    echo "Starting pa11y test Run on PublicWeb Urls"
    reportname = "Pa11y Report - publicweb"
    sh 'chmod 777 Devops/PallyReportPubWeb.sh'
    sh 'sh -x Devops/PallyReportPubWeb.sh'
    sh 'mkdir -p pally-publicWeb'
    sh 'mv PallyReportPublicWeb.html pally-publicWeb/PallyReportPublicWeb.html' 
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-publicWeb', reportFiles: 'PallyReportPublicWeb.html', reportName: 'PallyReport-PublicWeb', reportTitles: ''])
                                      
}
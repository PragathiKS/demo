@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
        }
    }
    
    // triggers {
    //     cron('H 1 * * 1-5')
    // }
    
    parameters {
        choice(name: 'Test_Env', choices: ['ALL', 'QA','DEV'], description: 'Select the environment')
        booleanParam defaultValue: true, description: 'Please check in case you want to test Public Web Module', name: 'Test_Publicweb'
        booleanParam defaultValue: true, description: 'Please check in case you want to test My Tetra Pak Module', name: 'Test_MyTetraPak'
        booleanParam defaultValue: true, description: 'Please check in case you want to test Accessibility with Pa11y', name: 'Pa11y_Execution'
        booleanParam defaultValue: true, description: 'Please check in case you want to test with Sitespeed', name: 'Sitespeed_Run'
        booleanParam defaultValue: true, description: 'Please check in case you want to test with ZAP', name: 'ZAP_Run'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }

    stages {
      
        stage('Pa11y Execution') {      
            when { expression { return params.Pa11y_Execution } }      
            steps {
                script {
                    dir('Devops') {
                        dir('pa11y') {
                            sh label: "Clean old reports", script: "sudo rm -rf mtp 2> /dev/null && sudo rm -rf pw  2> /dev/null"
                            sh label: "Clean node modules", script: "sudo rm -rf node_modules 2> /dev/null && sudo rm -f package-lock.json  2> /dev/null "
                            sh label: "initiate node project", script: "npm install"
                        }
                    }
                }
                script {
                    if (params.Test_Env == 'DEV' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Pa11y CuHu DEV - failed with error") {
                                pa11yCuHu(env: 'dev', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Pa11y PubWeb DEV - failed with error") {
                            pa11yPw(env: 'dev')
                            }                
                        }
                    }
                    if (params.Test_Env == 'QA' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Pa11y CuHu DEV - failed with error") {
                                pa11yCuHu(env: 'qa', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Pa11y PubWeb DEV - failed with error") {
                            pa11yPw(env: 'qa')
                            }                
                        }
                    }
                }

            }
        }
        stage('Sitespeed Execution') {      
            when { expression { return params.Sitespeed_Run } }
            steps {
                script {
                    sh label: "Preload Site-speed image", script: 'docker pull sitespeedio/sitespeed.io:27.3.0'
                    if (params.Test_Env == 'DEV' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Sitespeed CuHu DEV - failed with error") {
                                sitespeedCuHu(env: 'dev', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Sitespeed PubWeb DEV - failed with error") {
                            sitespeedpw(env: 'dev')  
                            }                
                        }
                    }
                    if (params.Test_Env == 'QA' || params.Test_Env == 'ALL') {
                        if (params.Test_MyTetraPak) {
                            warnError(message: "Sitespeed CuHu QA - failed with error") {
                                sitespeedCuHu(env: 'qa', uname: 'aemext099', upass: "T3traP@kr0ck\$")
                            }
                        }
                        if (params.Test_Publicweb) {
                            warnError(message: "Sitespeed PubWeb QA - failed with error") {
                                sitespeedpw(env: 'qa')  
                            }                 
                        }
                    }
                }
            } 
        }
        stage('Zap Tools Execution') {   
            when { expression { return params.ZAP_Run } }     
            steps {
                script {
                    sh 'sudo rm -rf Devops/zap 2> /dev/null && sudo mkdir -p Devops/zap && sudo chmod 777 Devops/zap'
                    if (params.Test_Publicweb) {
                        if (params.Test_Env == 'DEV' || params.Test_Env == 'ALL') {
                            warnError(message: "Zap Tools Execution failed with error") {
                                zaptestpw(env: 'dev') 
                            }    
                        }
                        if (params.Test_Env == 'QA' || params.Test_Env == 'ALL') {
                            zaptestpw(env: 'qa')
                        } 
                    } else {
                        echo "ZAP Test for Other apps are not supported yet."
                    }
                }
            } 
        }
            
        stage("Publish Report") {
            steps {
                script {
                    sh "sudo rm -rf NFR-Reports 2> /dev/null && sudo mkdir NFR-Reports && chmod 777 NFR-Reports"
                    if (params.ZAP_Run) {
                        sh label: "Copy ZAP Report", script: "mkdir -p  NFR-Reports/zap && cp -a Devops/zap/. NFR-Reports/zap/"
                    }
                    if(params.Sitespeed_Run) {
                        sh label: "Copy Sitespeed Report", script: "mkdir -p  NFR-Reports/sitespeed && cp -a Devops/sitespeed/Sitespeed-* NFR-Reports/sitespeed/"
                    }
                    if(params.Pa11y_Execution) {
                        sh "mkdir -p  NFR-Reports/pa11y"
                        if (params.Test_Publicweb) {
                            sh label: "Copy PW Pa11y reports", script: "cp -a Devops/pa11y/pw/. NFR-Reports/pa11y"
                        }
                        if(params.Test_MyTetraPak) {
                            sh label: "Copy MTP Pa11y reports", script: "cp -a Devops/pa11y/mtp/. NFR-Reports/pa11y"
                        }
                    }
                    zip zipFile :"NFR-Reports.zip" archive: true dir: "NFR-Reports" overwrite: true
                }
            }
        }
    }
}

def zaptestpw(Map map) {
    try {
        dir("Devops/zap") {
            def test_url_pw = "https://www-${map.env}.tetrapak.com"
            sh label: "Starting Zap Docker", script: "docker run --name zap -p 8080:8080 -u zap -v \"\$(pwd)/zap_test\":/zap/wrk/:rw -t owasp/zap2docker-stable:2.12.0 zap-full-scan.py -d -t '${test_url_pw}' -g gen.conf -m 2 -r zap_report_pw_${map.env}.html -P 8080 -I -z '-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true -config globalexcludeurl.url_list.url.regex=\".+(?<!([.]xml))\$\"'"
        }
    }
    catch(Exception e) {
        throw e
    } 
    finally {
        sh 'sudo docker stop zap'
        sh 'sudo docker rm zap'
    }
}

def sitespeedCuHu(Map map) {
    def url_list_file_nm = (map.env != 'stage') ? "cuhu_urls_${map.env}.txt" : "sitespeed-mtp-stage-test.mjs"
    def sustainable_args = "--sustainable.enable true --sustainable.model 'swd'"
    def prescript_args = "--preScript sitespeed-mtp-login.mjs --browsertime.test.env '${map.env}'"
    def prescript_credential_arg = "--browsertime.uname '${map.uname}' --browsertime.upass '${map.upass}' "
    def postscript_arg = "--postScript sitespeed-mtp-logout.mjs"
    def multi_arg = (map.env != 'stage') ? "" : "--multi"
    if (map.env != 'stage') {
        sh "cp Devops/PallyUrlsCuhu.txt Devops/sitespeed/${url_list_file_nm}"
        sh "sed -i \"s/dev/${map.env}/g\" Devops/sitespeed/${url_list_file_nm}"
    }
    dir('Devops') {
        dir('sitespeed') {
            def volume_args = "-v \"\$(pwd)\":/sitespeed.io"
            parallel (
                    "Sitespeed-CustomerHub-${map.env}-FireFox-Desktop" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-FireFox-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b firefox --headless true\
                            ${prescript_args}  ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${sustainable_args} ${multi_arg}  ${url_list_file_nm}"
                    },
                    "Sitespeed-CustomerHub-${map.env}-Chrome-Desktop" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-Chrome-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b chrome --headless true\
                            ${prescript_args}  ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${sustainable_args} ${multi_arg} ${url_list_file_nm}"
                    },
                    "Sitespeed-CustomerHub-${map.env}-IPhone6" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-IPhone6"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'iPhone 6' --headless true\
                            ${prescript_args} ${prescript_credential_arg} ${postscript_arg}\
                            --outputFolder ${reportDir} ${multi_arg} ${url_list_file_nm}" 
                    },
                    "Sitespeed-CustomerHub-${map.env}-Nexus7" : {
                        def reportName = "Sitespeed-CustomerHub-${map.env}-Nexus7"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'Nexus 7' --headless true\
                            ${prescript_args} ${prescript_credential_arg}  ${postscript_arg}\
                            --outputFolder ${reportDir} ${multi_arg} ${url_list_file_nm}" 
                    }
            )
        }
    }
} 

def sitespeedpw(Map map) {
    def url_list_file_nm = "pw_urls_${map.env}.txt"
    def sustainable_args = "--sustainable.enable true --sustainable.model 'swd'"
    def prescript_args = "--preScript sitespeed-pw-cookie_consent.mjs --browsertime.test.env '${map.env}'"
    sh "cp Devops/PallyUrlsPublicWeb.txt Devops/sitespeed/${url_list_file_nm}"
    dir('Devops') {
        dir('sitespeed') {
            sh "sed -i \"s/dev/${map.env}/g\" ${url_list_file_nm}"
            def volume_args = "-v \"\$(pwd)\":/sitespeed.io"
            parallel (
                    "Sitespeed-PublicWeb-${map.env}-FireFox-Desktop" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-FireFox-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b firefox --headless true\
                            --outputFolder ${reportDir} ${prescript_args}  ${sustainable_args} ${url_list_file_nm}" 
                    },
                    "Sitespeed-PublicWeb-${map.env}-Chrome-Desktop" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-Chrome-Desktop"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0 -b chrome --headless true\
                            --outputFolder ${reportDir} ${prescript_args}  ${sustainable_args} ${url_list_file_nm}"
                    },
                    "Sitespeed-PublicWeb-${map.env}-IPhone6" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-IPhone6"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'iPhone 6' --headless true\
                            --outputFolder ${reportDir} ${prescript_args} ${url_list_file_nm}" 
                    },
                    "Sitespeed-PublicWeb-${map.env}-Nexus7" : {
                        def reportName = "Sitespeed-PublicWeb-${map.env}-Nexus7"
                        def reportDir = reportName
                        sh  "docker run --rm ${volume_args} sitespeedio/sitespeed.io:27.3.0\
                            -b chrome --browsertime.chrome.mobileEmulation.deviceName 'Nexus 7' --headless true\
                            --outputFolder ${reportDir} ${prescript_args} ${url_list_file_nm}" 
                    }
            )
        }
    }
}                        

def pa11yCuHu(Map map) {
    dir('Devops') {
        dir('pa11y') {
            sh "sudo mkdir -p mtp/${map.env} && sudo chmod 777 mtp/${map.env}"
            def url_list_file_nm = "pa11y-mtp-${map.env}-urls.txt"
            sh label: "Run pa11y test", script: "node index.cjs 'mtp' ${map.env} ${map.uname} ${map.upass} ${url_list_file_nm}"
        }
    }
}

def pa11yPw(Map map) {
    dir('Devops') {
        dir('pa11y') {
            sh "sudo mkdir -p pw/${map.env} && sudo chmod 777 pw/${map.env}"    
            def url_list_file_nm = "pa11y-pw-${map.env}-urls.txt"
            sh label: "Run pa11y test", script: "node index.cjs 'pw' ${map.env} ${url_list_file_nm}"
        }
    }
}
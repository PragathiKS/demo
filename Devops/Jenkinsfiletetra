@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
        label 'cfe-deploy'
        }
    }
         triggers {
         cron('H 1 * * 1-5')
     }
    
    parameters {
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Build_Publicweb'
        booleanParam defaultValue: true, description: 'Please check in case you want to build Commons Module', name: 'Build_Tetralaval'
		booleanParam defaultValue: false, description: 'Please check in case you want to build Commons Module', name: 'Build_Commons'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to perform sonar analysis', name: 'Sonar_Analysis'
        
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
    }

    environment {
        sonar_url = "https://sonarcloud.io"
        login_token = "2354fbb990d5494aad3c578f2c9dd65147d01e02"
        author_url = "https://author1westeurope.dev65.tetrapak.adobecqms.net"
        test_url_cuhu = "https://mypages-dev.tetrapak.com/dashboard.html"
        test_url_pw = "https://www-dev.tetrapak.com"
        test_url_pally_zap_cuhu = "https://mypages-dev.tetrapak.com/dashboard.html"
        test_url_pally_zap_pw = "https://www-dev.tetrapak.com/contact-us"
        karmapath_cuhu = "${env.WORKSPACE}@2/tetrapak-customerhub/ui.dev/src/coverage"
        karmapath_pw = "${env.WORKSPACE}@2/tetrapak-publicweb/ui.dev/src/coverage"
        build_id_number = ""
    }

    stages {

        stage('init-build-Number') {
            steps {
                script {
                    def now = new Date()
                    def formattedDate
                    formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
                    echo "build_id_number = ${build_id_number}-SNAPSHOT"

		}
            }
        }

        stage('Build and Sonar analysis') {

            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2    --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                    
                }
                
            }

            steps {
	             script {
                    
                    echo "${build_id_number}"
                   sh "pwd;ls -ltr"
		   sh "cd tetra-laval/ui.frontend/ && sh -x ../nvmbuild.sh '${build_id_number}'"
                }
			
                script {
                    if (params.Build_Commons) {
                        appname = "tetrapak-commons"
                        buildandsonar()
                    }
                    else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						}
					}
                }
                
                script {
                    if (params.Build_Publicweb) {
                        appname = "publicweb"
                        buildandsonar()
                    }
                
                    else {
					    dir('tetrapak-publicweb') {
					        sh "npm install --prefix ui.dev/src"
						}
					}
                }
                          
                script {
                    if (params.Build_Tetralaval) {
                        appname = "tetra-laval"
                        buildandsonar()
                    }
                }				
            }
        }

        stage('Author and Publisher Deployment') {

            steps {
                script {
                author_url = "https://author1westeurope.dev65.tetrapak.adobecqms.net"
                publish_url = "https://publish1westeurope.dev65.tetrapak.adobecqms.net"                        
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aemcreddev', usernameVariable: 'username', passwordVariable: 'password']])
             {
                 devdeployment()
                 echo "$username"
                 echo "$password"
                 
             }
                }
            }

        }
        
        stage('Dev Cache Clear') {
            
            steps {
                script {
                    cacheflush()
                }
            }
        }
      

}
}

    def buildandsonar() {
                echo "Build ${appname}"
                dir("${appname}") {
                sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
		sh "/bin/sh -x tetra-laval/nvmbuild.sh '${build_id_number}'"
                //sh "npm cache clean --force"                    
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
                    {                       
               // sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
                  sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
                if (!params.Sonar_Analysis) {
                        echo "Skipping Sonar execution for customerhub module"
                    } else {
                        sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                    }
                }
                    }
    }

    def devdeployment() {
	    if (params.Build_Tetralaval)  {
                packageName = "tetrapak-tetralaval.all"
                repoName = "tetrapak-tetralaval"
                fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
                devartifactdownload()
                parallel (
                    "Author tetra-laval" : {
                authordeploy()
                    },
                    "Publisher tetra-laval" : {
                publishdeploy()
                    }
                )

            }
	    
    }               
            
    def devartifactdownload() {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
                sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
                echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"

        }

    }

    def authordeploy() {
                
                echo "Uninstalling Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Deleting Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}'"
                sleep 60
                echo "Uploading New Package on author"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 60
                echo "Installing New Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'"
                sleep 60

    }

    def publishdeploy() {
                
                echo "Uninstalling Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Deleting Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}'"
                sleep 60
                echo "Uploading New Package on publish"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 60
                echo "Installing New Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'"
                sleep 60

    }
    
    def cacheflush() {
                echo "Starting Dev Dispatcher Cache Clear"
                withCredentials([sshUserPrivateKey(credentialsId: 'cacheFlushDev', keyFileVariable: 'SSHKEY', passphraseVariable: '', usernameVariable: 'SSHUSER')])
                {
                sh 'ssh -o "StrictHostKeyChecking=no" -i ${SSHKEY} 40.113.160.27 -l tetrapak -tt "sh -x /usr/local/bin/cache_clear.sh"'
                }        
    }
    



    


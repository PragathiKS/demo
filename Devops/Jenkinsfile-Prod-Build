@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
        label 'cfe-deploy'
        }
    }
    
    parameters {
        booleanParam defaultValue: true, description: 'Please check in case you want to build Commons Module', name: 'Build_Commons'
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Build_Publicweb'
        booleanParam defaultValue: false, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Build_MyTetraPak'
	booleanParam defaultValue: false, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Build_Tetralaval'
	booleanParam defaultValue: false, description: 'Please check in case you want to build Supplierportal Module', name: 'Build_Supplierportal'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    environment {
        sonar_url = "https://sonarcloud.io"
        login_token = "2354fbb990d5494aad3c578f2c9dd65147d01e02"
        build_id_number = ""
    }

    stages {

        stage('init-build-Number') {
            steps {
                script {
                    def now = new Date()
                    def formattedDate
                    formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
                    echo "build_id_number = ${build_id_number}"

		}
            }
        }

        stage('Build Prod Artifact') {

            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2    --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                }
            }

            steps {
                script {
                    if (params.Build_Commons) {
                        appname = "commons"
                        buildandsonar()
                    }
                    else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						}
					}
                }

                script {
                    if (params.Build_MyTetraPak) {
                        appname = "customerhub"
                        buildandsonar()
                    }
                }
		 script {
                    if (params.Build_Supplierportal) {
                        appname = "supplierportal"
                        buildandsonar()
                    }
                }


                script {
                    if (params.Build_Publicweb) {
                        appname = "publicweb"
                        buildandsonar()
                    }
			else {
                                            dir('tetrapak-publicweb') {
                                                sh "npm install --prefix ui.dev/src"
                                                }
                                        }
                }
		script {
                    if (params.Build_Tetralaval) {
                        appname = "tetra-laval"
                        buildandsonarlaval()
                    }
                }
            }
        }

        stage('Author and Publisher Deployment') {
            agent {
                node {
                label 'cfe-deploy'
            } 
            }
            steps {
                script {
                    author_url = "https://author1westeurope.stage65.tetrapak.adobecqms.net"
                    username = "sapient-user"
                    password = "*?qbpgyd+hNKR6E%mQmle[XK"
                    stagedeployment()
                    echo "$username"
                }
            }
        }
	stage('Stage Cache Clear') {
            agent {
                node {
                label 'cfe-deploy'
            }
            }
            steps {
                script {
                    cacheflush()
                }
            }
			}

}
}
    def buildandsonar() {
                echo "Build ${appname}"
                dir("tetrapak-${appname}") {
                sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
                sh "npm cache clean --force"                    
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
                    {
						sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-${build_id_number}"
						if (!params.Sonar_Analysis) {
                        echo "Skipping Sonar execution for customerhub module"
                    } else {
						sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname} -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/** -Dbuildversion=${build_id_number}"
                    }
                }
                    }
    }
    def buildandsonarlaval() {
                echo "Build ${appname}"
                dir("tetrapak-${appname}") {
                sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
                sh "npm cache clean --force"
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
                    {

                                                sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbaseline.skip=true -Dbuildversion=1.0.0-${build_id_number}"
                                                if (!params.Sonar_Analysis) {
                        echo "Skipping Sonar execution for customerhub module"
                    } else {
                                                sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname} -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/** -Dbuildversion=${build_id_number}"
                    }
                }
                    }
    }
   

	def sonarreport() {
                echo "Publishing Sonar report"
                sh 'sudo mkdir -p reports'
                sh 'sudo chmod -R 777 reports'
                sh 'echo "<html> <br /> <p style="font-size:30px"> <a href="https://sonarcloud.io/organizations/tetrapak-smartsales/projects" target="_top">Sonarcloud Report</a> <br /> </p> </html>" > reports/sonarreport.html'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'sonarreport.html', reportName: 'SonarCloud Report', reportTitles: ''])
    }


    def stagedeployment() {

        if (params.Build_Commons)    {
                packageName = "tetrapak-commons.complete"
                repoName = "tetrapak"
                fileName = "1.0.0-${build_id_number}"
                prodartifactdownload()                
                parallel (
                    "Author Commons" : {                                    
                authordeploy()
                    },
                    "Publisher Commons" : {                  
                publish_url = "https://publish1westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    //},
                    //"Publisher 2 Commons" : {                
                publish_url = "https://publish2westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    }
                )

            }
        if (params.Build_MyTetraPak) {
                packageName = "tetrapak-customerhub.complete"
                repoName = "tetrapak-customerhub"                
                fileName = "1.0.0-${build_id_number}"                  
                prodartifactdownload()                   
                parallel (
                    "Author MyTetrapak" : {                               
                authordeploy()
                    },
                    "Publisher MyTetrapak" : {                      
                publish_url = "https://publish1westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    //},
                    //"Publisher 2 MyTetrapak" : {                      
                publish_url = "https://publish2westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()                           
                    }
                )
        }
	
	 if (params.Build_Supplierportal) {
                packageName = "tetrapak-supplierportal.complete"
                repoName = "tetrapak-supplierportal"
                fileName = "1.0.0-${build_id_number}"
                prodartifactdownload()
                parallel (
                    "Author Supplierportal" : {
                authordeploy()
                    },
                    "Publisher Supplierportal" : {
                publish_url = "https://publish1westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    //},
                    //"Publisher 2 MyTetrapak" : {
                publish_url = "https://publish2westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    }
                )
        }


        if (params.Build_Publicweb) {
                packageName = "tetrapak-publicweb.complete"
                repoName = "tetrapak-publicweb"
                fileName = "1.0.0-${build_id_number}"
                prodartifactdownload()
                parallel (
                    "Author PublicWeb" : {                               
                authordeploy()
                    },
                    "Publisher PublicWeb" : {                  
                publish_url = "https://publish1westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    //},
                    //"Publisher 2 PublicWeb" : {                  
                publish_url = "https://publish2westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    }
                )                
            }
	    if (params.Build_Tetralaval) {
                packageName = "tetrapak-tetralaval.all"
                repoName = "tetrapak-tetralaval"
                fileName = "1.0.0-${build_id_number}"
                prodartifactdownload()
                parallel (
                    "Author Tetralaval" : {
                authordeploy()
                    },
                    "Publisher Tetralaval" : {
                publish_url = "https://publish1westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    //},
                    //"Publisher 2 Tetralaval" : {
                publish_url = "https://publish2westeurope.stage65.tetrapak.adobecqms.net"
                publishdeploy()
                    }
                )
    }
       
    def prodartifactdownload() {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
                sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-release-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
                echo "https://tetrapak.jfrog.io/tetrapak/libs-release-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"

        }
    }   

    def authordeploy() {

                echo "Uninstalling Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Deleting Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Uploading New Package on author"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 60
                echo "Installing New Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'"
                sleep 60

    }

    def publishdeploy() {
                
                echo "Uninstalling Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Deleting Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}'"
                sleep 60
                echo "Uploading New Package on publish"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 60
                echo "Installing New Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'"
                sleep 60

    }     
    def cacheflush() {
                echo "Starting Stage Dispatcher Cache Clear"
                withCredentials([sshUserPrivateKey(credentialsId: 'cacheFlushDev', keyFileVariable: 'SSHKEY', passphraseVariable: '', usernameVariable: 'SSHUSER')])
                    {
                    sh 'ssh -o "StrictHostKeyChecking=no" -i ${SSHKEY} 20.56.128.106 -l tetrapak -tt "sh -x /usr/local/bin/cache_clear.sh"'
                    sh 'ssh -o "StrictHostKeyChecking=no" -i ${SSHKEY} 51.124.104.113 -l tetrapak -tt "sh -x /usr/local/bin/cache_clear.sh"'
                }
    }

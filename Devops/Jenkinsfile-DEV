@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
        }
    }
    
    // triggers {
    //     cron('H 1 * * 1-5')
    // }
    
    parameters {
        booleanParam defaultValue: true, description: 'Please check in case you want to build Commons Module', name: 'Build_Commons'
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Build_Publicweb'
        booleanParam defaultValue: false, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Build_MyTetraPak'
	    booleanParam defaultValue: false, description: 'Please check in case you want to build Tetralaval Module', name: 'Build_Tetralaval'
	    booleanParam defaultValue: false, description: 'Please check in case you want to build Supplierportal Module', name: 'Build_Supplierportal'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to perform sonar analysis', name: 'Sonar_Analysis'
        booleanParam defaultValue: false, description: 'Please uncheck in case you do not want to execute the pipeline with Accessibility Test', name: 'Pa11y_Execution'
        booleanParam defaultValue: false, description: 'Please uncheck in case you do not want to execute the pipeline with ZAP Test', name: 'ZAP_Run'
        booleanParam defaultValue: false, description: 'Please uncheck in case you do not want to execute the pipeline with Sitespeed Test', name: 'Sitespeed_Run'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
    }

    environment {
        sonar_url = "https://sonarcloud.io"
        login_token = "2354fbb990d5494aad3c578f2c9dd65147d01e02"
        build_id_number = ""
        docker_workspace_dir = ""
    }

    stages {
        stage('init-build-Number') {
            steps {
                script {
                    def now = new Date()
                    def formattedDate
                    formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
                    echo "build_id_number = ${build_id_number}-SNAPSHOT"
		        }
            }
        }

        stage('Build and Sonar analysis') {
            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2    --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                }
            }
            steps {
                script {
                    if (params.Build_Commons) {
                        appname = "commons"
                        buildandsonar()
                    }
                    else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						    sh "npm rebuild node-sass"
						}
					}
                }

                script {
                    if (params.Build_MyTetraPak) {
                        appname = "customerhub"
                        buildandsonar()
                    }
                }

                script {
                    if (params.Build_Publicweb) {
                        appname = "publicweb"
                        buildandsonar()
                    }
                    else {
                        dir('tetrapak-publicweb') {
                            sh "npm install --prefix ui.dev/src"
                        }
                    }
                }
                script {
                        if (params.Build_Tetralaval) {
                            appname = "tetra-laval"
                            buildandsonarlaval()
                        }
                }
		        script {
                    if (params.Build_Supplierportal) {
                        appname = "supplierportal"
                        buildandsonarsupplier()
                    }
                }
                script {
                    warnError(message: "Publish Coverage report with error") {
                        publishCoverageReport()
                    }
                }
            }
        }

        stage('Author and Publisher Deployment') {
            steps {
                script {
                    author_url = "https://author1westeurope.dev65.tetrapak.adobecqms.net"
                    publish_url = "https://publish1westeurope.dev65.tetrapak.adobecqms.net"                        
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aemcreddev', usernameVariable: 'username', passwordVariable: 'password']])
                    {
                        //devdeployment()
                    }
                }
            }
        }
        
        stage('Dev Cache Clear') {
            steps {
                script {
                    cacheflush()
                }
            }
        }

        stage('Pa11y Execution') {            
            steps {
                script {
                    warnError(message: "Pa11y Execution failed with error") {
                        if (!params.Pa11y_Execution) {
                            echo "Skipping Pa11y Execution"
                        }
                        else {
                            parallel (
                                "MyTetrapak Pa11y Test" : {
                                    if (params.Build_MyTetraPak) {
                                        pallycuhuscript()
                                    }
                                },
                                "PublicWeb Pa11y Test" : {
                                    if (params.Build_Publicweb) {
                                        pallypwscript()
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }

        stage('Zap Tools Execution') {        
            steps {
                script {
                    if (params.ZAP_Run) {
                        warnError(message: "Zap Tools Execution failed with error") {
                            zaptest()
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "zap-${appname}", reportFiles: 'zap.html', reportName: "ZAPReport-${appname}", reportTitles: '']) 
                        }           					
                    }
                }
            } 
        }

        stage('Sitespeed Execution') {        
            steps {
                script {
                    warnError(message: "Sitespeed Execution failed with error") {
                        if (!params.Sitespeed_Run) {
                            echo "Skipping Sitespeed Execution"                
                        }
                        else {
                            parallel (
                                "MyTetrapak SiteSpeed Test" : {
                                    if (params.Build_MyTetraPak) {
                                        sitespeedcuhu()
                                    }
                                },
                                "PublicWeb SiteSpeed Test" : {
                                    if (params.Build_Publicweb) {
                                        sitespeedpw()                  
                                    }
                                }
                            )
                        }
                    }
                }
            } 
        }

}

//Post notification in MS Teams
    post {
        always {
            sendNotifications(currentBuild.currentResult)
        }
    }
}

def buildandsonar() {
    echo "Build ${appname}"
    dir("tetrapak-${appname}") {
        sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
        sh "npm cache clean --force"                    
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {                       
            sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            if (!params.Sonar_Analysis) {
                echo "Skipping Sonar execution for ${appname} module"
            } else {
                sh "mvn sonar:sonar -Dsonar.issuesReport.html.enable=true -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                sonarreport()
            }
        }
    }
}

def buildandsonarsupplier() {
        echo "Build ${appname}"
        dir("tetrapak-${appname}") {
            sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
            sh "npm cache clean --force"
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
            {
                sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
                if (!params.Sonar_Analysis) {
                    echo "Skipping Sonar execution for ${appname} module"
                } else {
                    sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                    sonarreport()
                }
            }
        }
    }

def buildandsonarlaval() {
    echo "Build ${appname}"
    dir("${appname}") {
        sh "rm -rf ui.frontend/node_modules && rm -rf ui.frontend/package-lock.json"
        sh "npm cache clean --force"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
            sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            if (!params.Sonar_Analysis) {
                echo "Skipping Sonar execution for ${appname} module"
            } else {
                sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                sonarreport()
            }
        }
    }
}

def devdeployment() {  
    if (params.Build_Commons)  {
            packageName = "tetrapak-commons.complete"
            repoName = "tetrapak"
            fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
            devartifactdownload()
            parallel (
                "Author Commons" : {
                    authordeploy()
                },
                "Publisher Commons" : {
                    publishdeploy()
                }
            )

    }
    if (params.Build_MyTetraPak) {
            packageName = "tetrapak-customerhub.complete"
            repoName = "tetrapak-customerhub"                
            fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
            devartifactdownload()
            parallel (  
                "Author MyTetrapak" : {                                  
                    authordeploy()
                },
                "Publisher MyTetrapak" : {                                    
                    publishdeploy() 
                }
            )                           
    }
	if (params.Build_Supplierportal) {
        packageName = "tetrapak-supplierportal.complete"
        repoName = "tetrapak-supplierportal"
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownload()
        parallel (
            "Author Supplierportal" : {
                authordeploy()
            },
            "Publisher Supplierportal" : {
                publishdeploy()
            }
        )
    }

    if (params.Build_Publicweb) {
        packageName = "tetrapak-publicweb.complete"
        repoName = "tetrapak-publicweb"                
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownload()
        parallel (    
            "Author PublicWeb" : {                                    
                authordeploy()
            },
            "Publisher PublicWeb" : {                     
                publishdeploy()  
            }
        )
    }
	if (params.Build_Tetralaval)  {
        packageName = "tetrapak-tetralaval.all"
        repoName = "tetrapak-tetralaval"
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownloadlaval()
        parallel (
            "Author tetra-laval" : {
                authordeploy()
            },
            "Publisher tetra-laval" : {
                publishdeploy()
            }
        )
    }
}
    
def devartifactdownload() {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
    {
        sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
        echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
    }
}

def authordeploy() {    
    sh label: 'Uninstalling Old Package on author', script: "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'   && sleep 60"
    sh label: 'Deleting Old Package on author', script: "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}'   && sleep 60"
    sh label: 'Uploading New Package on author', script: "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=upload' --verbose   && sleep 60"
    sh label: 'Installing New Package on author', script: "curl -k -u ${username}:${password} -F force=true  '${author_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'  && sleep 60"
}

def publishdeploy() {   
    sh label: 'Uninstalling Old Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'  && sleep 60"
    sh label: 'Deleting Old Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}' && sleep 60"
    sh label: 'Uploading New Package on publish', script: "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=upload' --verbose  && sleep 60"
    sh label: 'Installing New Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'  && sleep 60"
}

def publishCoverageReport() {
    if (params.Build_MyTetraPak) {
        reportname = "Karma Report - MyTetrapak"
        sh label: "Publising karma Test Report- MyTetrapak", script: "cp -r tetrapak-customerhub/ui.dev/src/coverage customerhub"
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'customerhub', reportFiles: 'index.html', reportName: 'KarmaReport-MyTetraPak', reportTitles: ''])
    }
    if (params.Build_Publicweb) {
        reportname = "Karma Report - Publicweb"
        sh label: "Publising karma Test Report- MyTetrapak", script: "cp -r tetrapak-publicweb/ui.dev/src/coverage publicweb"
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'publicweb', reportFiles: 'index.html', reportName: 'KarmaReport-Publicweb', reportTitles: ''])
    }
}

def zaptest() {
    def test_url_pally_zap_pw = "https://www-dev.tetrapak.com/"
    echo "Starting Zap Test Run- ${appname}"
    sh 'sudo docker ps -a'
    sh 'if docker ps | grep zap; then echo "ZAP is running, initiating stop and remove" && sudo docker stop zap && sudo docker rm zap ; else echo "stopped"; fi'
    sh 'docker run --add-host tetrapak-dev65.adobecqms.net:52.142.237.145 -e LANG=C.UTF-8 --detach --name zap -u zap -v "$(pwd)/reports":/zap/reports/:rw owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0  -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true'  
    sleep 30
    echo "Starting ZAP test Run on ${appname} Urls"
    sh "docker exec  zap zap-cli spider ${test_url_pally_zap_pw}"
    sh 'docker exec  zap zap-cli report -f html -o zap.html'
    sh "mkdir -p zap-${appname}"
    sh "docker cp zap:zap/zap.html zap-${appname}"
    sh 'sudo docker stop zap'
    sh 'sudo docker rm zap'
}


def sitespeedcuhu() {
    test_url_cuhu = "https://mypages-dev.tetrapak.com/dashboard.html"
    echo "Starting Sitespeed-Desktop Test Run for ${appname}"
    sh 'docker run --add-host tetrapak-dev65.adobecqms.net:52.142.237.145 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io "${test_url_cuhu}" -b firefox --outputFolder sitespeed_desktop'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_desktop', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-Desktop', reportTitles: ''])

    echo "Starting Sitespeed-Mobile Test Run for ${appname}"
    sh 'docker run --add-host tetrapak-dev65.adobecqms.net:52.142.237.145 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --mobile "${test_url_cuhu}" -b firefox --outputFolder sitespeed_mobile'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_mobile', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-Mobile', reportTitles: ''])

    echo "Starting Sitespeed-IPAD Test Run for ${appname}"
    sh 'docker run --add-host tetrapak-dev65.adobecqms.net:52.142.237.145 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --browsertime.viewPort 400x400 --browsertime.userAgent "Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10" "${test_url_cuhu}" -b firefox --outputFolder sitespeed_ipad'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_ipad', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-IPad', reportTitles: ''])
}

def sitespeedpw() {
    test_url_pw = "https://www-dev.tetrapak.com"
    sh label: "Starting Sitespeed-Firefox-Desktop Test Run for publicweb", script: 'docker run --rm -v "$(pwd)/sitespeed":/sitespeed.io sitespeedio/sitespeed.io -b firefox --outputFolder sitespeed_ff https://www-dev.tetrapak.com' 
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_ff', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-Desktop', reportTitles: ''])

    sh label: "Starting Sitespeed-Chrome-Desktop Test Run for publicweb", script: 'docker run --rm -v "$(pwd)/sitespeed":/sitespeed.io sitespeedio/sitespeed.io -b chrome --outputFolder sitespeed_chrome https://www-dev.tetrapak.com'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_chrome', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-Chrome', reportTitles: ''])

    sh label: "Starting Sitespeed-IPhone6+ Test Run for publicweb", script: 'docker run --rm -v "$(pwd)/sitespeed":/sitespeed.io sitespeedio/sitespeed.io -b chrome --browsertime.chrome.mobileEmulation.deviceName "Apple iPhone 6 Plus"  --outputFolder sitespeed_iphone6Plus https://www-dev.tetrapak.com'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_iphone6Plus', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-iphone6Plus', reportTitles: ''])

    sh label: "Starting Sitespeed-SamsungS3 Test Run for publicweb", script: 'docker run --rm -v "$(pwd)/sitespeed":/sitespeed.io sitespeedio/sitespeed.io -b chrome --browsertime.chrome.mobileEmulation.deviceName "Samsung Galaxy S III"  --outputFolder sitespeed_samsungs3 https://www-dev.tetrapak.com'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_samsungs3', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-SamsungS3', reportTitles: ''])
}                        

def pallycuhuscript() {
    echo "Starting pa11y test Run on CustomerHub Urls"
    reportname = "Pa11y Report - CustomerHub"
    sh 'chmod 777 Devops/PallyReportCuhu.sh'
    sh 'sh -x Devops/PallyReportCuhu.sh'
    sh 'mkdir -p pally-customerHub'
    sh 'mv PallyReportCuhu.html pally-customerHub/PallyReportCuhu.html' 
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-customerHub', reportFiles: 'PallyReportCuhu.html', reportName: 'PallyReport-MyTetraPak', reportTitles: ''])
}

def pallypwscript() {
    echo "Starting pa11y test Run on PublicWeb Urls"
    reportname = "Pa11y Report - publicweb"
    sh 'chmod 777 Devops/PallyReportPubWeb.sh'
    sh 'sh -x Devops/PallyReportPubWeb.sh'
    sh 'mkdir -p pally-publicWeb'
    sh 'mv PallyReportPublicWeb.html pally-publicWeb/PallyReportPublicWeb.html' 
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-publicWeb', reportFiles: 'PallyReportPublicWeb.html', reportName: 'PallyReport-PublicWeb', reportTitles: ''])
                                      
}

def cacheflush() {
    echo "Starting Dev Dispatcher Cache Clear"
    withCredentials([sshUserPrivateKey(credentialsId: 'cacheFlushDev', keyFileVariable: 'SSHKEY', passphraseVariable: '', usernameVariable: 'SSHUSER')])
    {
        sh 'ssh -o "StrictHostKeyChecking=no" -i ${SSHKEY} 40.113.160.27 -l tetrapak -tt "sh -x /usr/local/bin/cache_clear.sh"'
    }        
}

def sonarreport() {
    echo "Publishing Sonar report"
    sh 'mkdir -p reports'
    sh 'chmod -R 777 reports'
    sh 'echo "<html> <br /> <p style="font-size:30px"> <a href="https://sonarcloud.io/organizations/tetrapak-smartsales/projects" target="_top">Sonarcloud Report</a> <br /> </p> </html>" > reports/sonarreport.html'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'sonarreport.html', reportName: 'SonarCloud Report', reportTitles: ''])
}

def devartifactdownloadlaval() {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
    {
        sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
        echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
    }
}
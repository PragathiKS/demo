@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
        label 'cfe-deploy'
        }
    }
         triggers {
         cron('H 1 * * 1-5')
     }
    
    parameters {
        booleanParam defaultValue: true, description: 'Please check in case you want to build Commons Module', name: 'Build_Commons'
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Build_Publicweb'
        booleanParam defaultValue: false, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Build_MyTetraPak'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to perform sonar analysis', name: 'Sonar_Analysis'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to execute the pipeline with all Tools', name: 'Tools_Execution'

    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
    }

    environment {
        sonar_url = "https://sonarcloud.io"
        login_token = "2354fbb990d5494aad3c578f2c9dd65147d01e02"
        author_url = "https://author-tetrapak-dev64a.adobecqms.net"
        test_url_cuhu = "https://tetrapak-dev64a.adobecqms.net/content/tetrapak/customerhubtools/global/en/dashboard.html https://tetrapak-dev64a.adobecqms.net/content/tetrapak/customerhubtools/global/en/financials.html"
        test_url_pw = "http://tetrapak-dev64a.adobecqms.net/content/tetrapak/public-web/global/en/innovations.html http://tetrapak-dev64a.adobecqms.net/content/tetrapak/public-web/global/en.html http://tetrapak-dev64a.adobecqms.net/content/tetrapak/public-web/global/en/solutions.html"
        test_url_pally_zap_cuhu = "https://tetrapak-dev64a.adobecqms.net/content/tetrapak/customerhubtools/global/en/dashboard.html"
        test_url_pally_zap_pw = "https://tetrapak-dev64a.adobecqms.net/content/tetrapak/public-web/global/en.html"
        karmapath_cuhu = "${env.WORKSPACE}@2/tetrapak-customerhub/ui.dev/src/coverage"
        karmapath_pw = "${env.WORKSPACE}@2/tetrapak-publicweb/ui.dev/src/coverage"
        build_id_number = ""
    }

    stages {

        stage('init-build-Number') {
            steps {
                script {
                    def now = new Date()
                    def formattedDate
                    formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
                    echo "build_id_number = ${build_id_number}-SNAPSHOT"

		}
            }
        }

        stage('Build and Sonar analysis') {

            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2    --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                }
            }

            steps {
                script {
                    if (params.Build_Commons) {
                        appname = "commons"
                        buildandsonar()
                    }
                    else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						}
					}
                }

                script {
                    if (params.Build_MyTetraPak) {
                        appname = "customerhub"
                        buildandsonar()
                    }
                }

                script {
                    if (params.Build_Publicweb) {
                        appname = "publicweb"
                        buildandsonar()
                    }
                }
            }
        }

        stage('Author and Publisher Deployment') {
            agent {
                node {
                label 'cfe-deploy'
            } 
            }
            steps {
                script {
                author_url = "https://author1.dev.tetrapak.adobecqms.net"
                publish_url = "https://publish1.dev.tetrapak.adobecqms.net"                        
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aemcreddev', usernameVariable: 'username', passwordVariable: 'password']])
             {
                 devdeployment()
                 echo "$username"
                 echo "$password"
                 
             }
                }
            }

        }

        stage('Karma, Pa11y, Zap Tools Execution') {
            agent {
                node {
                label 'cfe-deploy'
            } 
            }            
            steps {
                script {
                if (!params.Tools_Execution) {
                        echo "Skipping Tools Execution"
                }
                else {
                if (params.Build_MyTetraPak) {
                    appname = "customerhub"
                    karmatest() 
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'customerhub', reportFiles: 'index.html', reportName: 'KarmaReport-MyTetraPak', reportTitles: ''])
                    pallycuhuscript()
                    //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-customerhub', reportFiles: 'PallyReportCuhu.html', reportName: 'PallyReport- MyTetraPak', reportTitles: ''])
                    zaptest()
                	publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'zap-customerhub', reportFiles: 'zap.html', reportName: 'ZAPReport-MyTetraPak', reportTitles: ''])            

                }

                if (params.Build_Publicweb) {
                    appname = "publicweb"
                    karmatest()
					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'publicweb', reportFiles: 'index.html', reportName: 'KarmaReport-Publicweb', reportTitles: ''])
                    pallypwscript()
					//publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-publicweb', reportFiles: 'PallyReportPublicWeb.html', reportName: 'PallyReport-PublicWeb', reportTitles: ''])
                    zaptest()
					publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'zap-publicweb', reportFiles: 'zap.html', reportName: 'ZAPReport-PublicWeb', reportTitles: ''])   

                }
                }
				
				if (params.Sonar_Analysis) {
                    sonarreport()
                }
				
                }
        }
    }
        stage('Sitespeed Execution') {
            agent {
                node {
                label 'cfe-deploy'
            } 
            }            
            steps {
                script {
            if (!params.Tools_Execution) {
                echo "Skipping Sitespeed Execution for Desktop"                
            }
            else {
                if (params.Build_MyTetraPak) {
                    sitespeedcuhu()
                }
                if (params.Build_Publicweb) {
                    sitespeedpw()                  
                }
            }
            }
        } 
        }

        stage('Dev Cache Clear') {
            agent {
                node {
                label 'cfe-deploy'
            }
            }
            steps {
                script {
                    cacheflush()
                }
            }
        }
}

//Post notification in MS Teams
    post {
        always {
            sendNotifications(currentBuild.currentResult)
        }
    }
}
    def buildandsonar() {
                echo "Build ${appname}"
                dir("tetrapak-${appname}") {
                sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
                sh "npm cache clean --force"                    
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
                    {                       
                sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
                    if (!params.Sonar_Analysis) {
                        echo "Skipping Sonar execution for customerhub module"
                    } else {
                        sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.coverage.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                    }
                }
                    }
    }

    def devdeployment() {
                
        if (params.Build_Commons)  {
                packageName = "tetrapak-commons.complete"
                repoName = "tetrapak"
                fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
                devartifactdownload()
                parallel (
                    "Author Commons" : {
                authordeploy()
                    },
                    "Publisher Commons" : {
                publishdeploy()
                    }
                )

            }
        if (params.Build_MyTetraPak) {
                packageName = "tetrapak-customerhub.complete"
                repoName = "tetrapak-customerhub"                
                fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
                devartifactdownload()
                parallel (  
                    "Author MyTetrapak" : {                                  
                authordeploy()
                    },
                    "Publisher MyTetrapak" : {                                    
                publishdeploy() 
                    }
                )                           
        }
        if (params.Build_Publicweb) {
                packageName = "tetrapak-publicweb.complete"
                repoName = "tetrapak-publicweb"                
                fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
                devartifactdownload()
                parallel (    
                    "Author PublicWeb" : {                                    
                authordeploy()
                    },
                    "Publisher PublicWeb" : {                     
                publishdeploy()  
                    }
                )
            }             

        }
    
    def devartifactdownload() {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
                sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
                echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"

        }

    }

    def authordeploy() {
                
                echo "Uninstalling Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}'"
                sleep 20
                echo "Deleting Old Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}'"
                sleep 20
                echo "Uploading New Package on author"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 20
                echo "Installing New Package on author"
                sh "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}'"
                sleep 20

    }

    def publishdeploy() {
                
                echo "Uninstalling Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}'"
                sleep 20
                echo "Deleting Old Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}'"
                sleep 20
                echo "Uploading New Package on publish"
                sh "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=upload' --verbose"
                sleep 20
                echo "Installing New Package on publish"
                sh "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}'"
                sleep 20

    }

    def karmatest() {
            if (params.Build_MyTetraPak) {
                echo "Publising karma Test Report- MyTetrapak"
                reportname = "Karma Report - MyTetrapak"
                sh "cp -r ${karmapath_cuhu} ${appname}"
            }
            if (params.Build_Publicweb) {
                echo "Publising karma Test Report- Publicweb"
                reportname = "Karma Report - Publicweb"
                sh "cp -r ${karmapath_pw} ${appname}"
            }

    }

    def zaptest() {
                echo "Starting Zap Test Run- ${appname}"
                sh 'docker ps -a'
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 -e LANG=C.UTF-8 --detach --name zap -u zap -v "$(pwd)/reports":/zap/reports/:rw owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0  -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true'  
                sleep 20
                echo "Starting ZAP test Run on ${appname} Urls"
                sh 'docker exec  zap zap-cli spider ${test_url_pally_zap_cuhu}'
                sh 'docker exec  zap zap-cli report -f html -o zap.html'
                sh "mkdir -p zap-${appname}"
                sh "docker cp zap:zap/zap.html zap-${appname}"
                sh 'docker stop zap'
                sh 'docker rm zap'
        }


    def sitespeedcuhu() {
                echo "Starting Sitespeed-Desktop Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io "${test_url_cuhu}" -b firefox --outputFolder sitespeed_desktop'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_desktop', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-Desktop', reportTitles: ''])

                echo "Starting Sitespeed-Mobile Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --mobile "${test_url_cuhu}" -b firefox --outputFolder sitespeed_mobile'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_mobile', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-Mobile', reportTitles: ''])

                echo "Starting Sitespeed-IPAD Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --browsertime.viewPort 400x400 --browsertime.userAgent "Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10" "${test_url_cuhu}" -b firefox --outputFolder sitespeed_ipad'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_ipad', reportFiles: 'index.html', reportName: 'SitespeedReport-MyTetraPak-IPad', reportTitles: ''])
                        }

    def sitespeedpw() {
                echo "Starting Sitespeed-Desktop Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io "${test_url_pw}" -b firefox --outputFolder sitespeed_desktop'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_desktop', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-Desktop', reportTitles: ''])

                echo "Starting Sitespeed-Mobile Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --mobile "${test_url_pw}" -b firefox --outputFolder sitespeed_mobile'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_mobile', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-Mobile', reportTitles: ''])

                echo "Starting Sitespeed-IPAD Test Run for ${appname}"
                sh 'docker run --add-host tetrapak-dev64a.dev.adobecqms.net:104.46.45.30 --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io --browsertime.viewPort 400x400 --browsertime.userAgent "Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10" "${test_url_pw}" -b firefox --outputFolder sitespeed_ipad'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'sitespeed_ipad', reportFiles: 'index.html', reportName: 'SitespeedReport-PublicWeb-IPad', reportTitles: ''])
                        }                        

    def pallycuhuscript() {
                echo "Starting pa11y test Run on CustomerHub Urls"
                reportname = "Pa11y Report - CustomerHub"
                sh 'chmod 777 Devops/PallyReportCuhu.sh'
                sh 'sh -x Devops/PallyReportCuhu.sh'
                sh 'mkdir -p pally-customerHub'
                sh 'mv PallyReportCuhu.html pally-customerHub/PallyReportCuhu.html' 
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-customerHub', reportFiles: 'PallyReportCuhu.html', reportName: 'PallyReport- MyTetraPak', reportTitles: ''])
    }

    def pallypwscript() {
                echo "Starting pa11y test Run on PublicWeb Urls"
                reportname = "Pa11y Report - publicweb"
				sh 'chmod 777 Devops/PallyReportPubWeb.sh'
				sh 'sh -x Devops/PallyReportPubWeb.sh'
				sh 'mkdir -p pally-publicWeb'
                sh 'mv PallyReportPublicWeb.html pally-publicWeb/PallyReportPublicWeb.html' 
				publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'pally-publicWeb', reportFiles: 'PallyReportPublicWeb.html', reportName: 'PallyReport-PublicWeb', reportTitles: ''])
                 			                
    }
    
    def cacheflush() {
                echo "Starting Dev Dispatcher Cache Clear"
                withCredentials([sshUserPrivateKey(credentialsId: 'cacheFlushDev', keyFileVariable: 'SSHKEY', passphraseVariable: '', usernameVariable: 'SSHUSER')])
                {
                sh 'ssh -o "StrictHostKeyChecking=no" -i ${SSHKEY} 104.46.45.30 -l tetrapak -tt "sh -x /usr/local/bin/cache_clear.sh"'
                }        
    }
	
	def sonarreport() {
                echo "Publishing Sonar report"
                sh 'sudo mkdir -p reports'
                sh 'sudo chmod -R 777 reports'
                sh 'echo "<html> <br /> <p style="font-size:30px"> <a href="https://sonarcloud.io/organizations/tetrapak-smartsales/projects" target="_top">Sonarcloud Report</a> <br /> </p> </html>" > reports/sonarreport.html'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'sonarreport.html', reportName: 'SonarCloud Report', reportTitles: ''])
    }
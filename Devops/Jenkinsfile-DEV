@Library('jenkins-pipeline-library') _

pipeline {
    agent {
        node {
            label 'cfe-deploy'
        }
    }
    
    triggers {
        cron('H 0 * * 1-5')
    }
    
    parameters {
        booleanParam defaultValue: true, description: 'Please check in case you want to build Commons Module', name: 'Build_Commons'
        booleanParam defaultValue: true, description: 'Please check in case you want to build Public Web Module', name: 'Build_Publicweb'
        booleanParam defaultValue: false, description: 'Please check in case you want to build My Tetra Pak Module', name: 'Build_MyTetraPak'
	    booleanParam defaultValue: false, description: 'Please check in case you want to build Tetralaval Module', name: 'Build_Tetralaval'
	    booleanParam defaultValue: false, description: 'Please check in case you want to build Supplierportal Module', name: 'Build_Supplierportal'
        booleanParam defaultValue: true, description: 'Please uncheck in case you do not want to perform sonar analysis', name: 'Sonar_Analysis'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        office365ConnectorWebhooks([[
            name: 'Office 365',
            startNotification: true,
            url: "https://tetrapak.webhook.office.com/webhookb2/53b8ede5-b02a-49e6-9ed1-5086cb59ca39@d2d2794a-61cc-4823-9690-8e288fd554cc/IncomingWebhook/178ca49866bd49ffa589e2339c07fe64/fa27bbed-fdda-4ecd-97e8-d8f572ab24d1"
        ]])
    }

    environment {
        sonar_url = "https://sonarcloud.io"
        login_token = "2354fbb990d5494aad3c578f2c9dd65147d01e02"
        build_id_number = ""
        docker_workspace_dir = ""
    }

    stages {
        stage('init-build-Number') {
            steps {
                script {
                    def now = new Date()
                    def formattedDate
                    formattedDate = now.format("yyyyMMddHHmm")
                    build_id_number = formattedDate
                    echo "build_id_number = ${build_id_number}-SNAPSHOT"
		        }
            }
        }

        stage('Build and Sonar analysis') {
            agent {
                dockerfile {
                    args "-v ${env.HOME}/.m2:/root/.m2    --tmpfs /.npm -u root:root"
                    label 'cfe-deploy'
                    reuseNode true
                }
            }
            steps {
                script {
                    if (params.Build_Commons) {
                        appname = "commons"
                        buildandsonar()
                    }
                    else {
					    dir('tetrapak-commons') {
					        sh "npm install --prefix ui.dev/src"
						    sh "npm rebuild node-sass"
						}
					}
                }

                script {
                    if (params.Build_MyTetraPak) {
                        appname = "customerhub"
                        buildandsonar()
                    }
                }

                script {
                    if (params.Build_Publicweb) {
                        appname = "publicweb"
                        buildandsonar()
                    }
                    else {
                        dir('tetrapak-publicweb') {
                            sh "npm install --prefix ui.dev/src"
                        }
                    }
                }
                script {
                        if (params.Build_Tetralaval) {
                            appname = "tetra-laval"
                            buildandsonarlaval()
                        }
                }
		        script {
                    if (params.Build_Supplierportal) {
                        appname = "supplierportal"
                        buildandsonarsupplier()
                    }
                }
                script {
                    warnError(message: "Publish Coverage report with error") {
                        publishCoverageReport()
                    }
                }
            }
        }

        stage('Author and Publisher Deployment') {
            steps {
                script {
                    author_url = "https://author1westeurope.dev65.tetrapak.adobecqms.net"
                    publish_url = "https://publish1westeurope.dev65.tetrapak.adobecqms.net"                        
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aemcreddev', usernameVariable: 'username', passwordVariable: 'password']])
                    {
                        devdeployment()
                    }
                }
            }
        }
        
        stage('Dev Cache Clear') {
            steps {
                script {
                    cacheflush()
                }
            }
        }
}

//Post notification in MS Teams
    post {
        always {
            script {
                notifyBuildStatus()
            }
        }
        cleanup {
            sh label: "clean log4j from .m2 cache", script: "sudo rm -rf ~/.m2/repository/log4j/*"
            cleanWs deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true
        }
    }
}

def buildandsonar() {
    echo "Build ${appname}"
    dir("tetrapak-${appname}") {
        sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
        sh "npm cache clean --force"                    
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {                       
            sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            if (!params.Sonar_Analysis) {
                echo "Skipping Sonar execution for ${appname} module"
            } else {
                sh "mvn sonar:sonar -Dsonar.issuesReport.html.enable=true -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                sonarreport()
            }
        }
    }
}

def buildandsonarsupplier() {
        echo "Build ${appname}"
        dir("tetrapak-${appname}") {
            sh "rm -rf ui.dev/src/node_modules && rm -rf ui.dev/src/package-lock.json"
            sh "npm cache clean --force"
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
            {
                sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
                if (!params.Sonar_Analysis) {
                    echo "Skipping Sonar execution for ${appname} module"
                } else {
                    sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                    sonarreport()
                }
            }
        }
    }

def buildandsonarlaval() {
    echo "Build ${appname}"
    dir("${appname}") {
        sh "rm -rf ui.frontend/node_modules && rm -rf ui.frontend/package-lock.json"
        sh "npm cache clean --force"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
        {
            sh "mvn clean -s settings.xml -Dartuser=${artifactuser} -Dartpassword=${artifactpassword} install deploy -Pminify -Dbuildversion=1.0.0-DEV${build_id_number}-SNAPSHOT"
            if (!params.Sonar_Analysis) {
                echo "Skipping Sonar execution for ${appname} module"
            } else {
                sh "mvn sonar:sonar -Dsonar.organization=tetrapak-smartsales   -Dsonar.host.url=${sonar_url} -Dsonar.buildbreaker.skip=true -Dsonar.login=${login_token} -Dsonar.branch=tetrapack-${appname}  -Dsonar.languages=java,js,css  -Dsonar.test.exclusions=**/core/src/test/**  -Dbuildversion=${build_id_number}-SNAPSHOT"
                sonarreport()
            }
        }
    }
}

def devdeployment() {  
    if (params.Build_Commons)  {
            packageName = "tetrapak-commons.complete"
            repoName = "tetrapak"
            fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
            devartifactdownload()
            parallel (
                "Author Commons" : {
                    authordeploy()
                },
                "Publisher Commons" : {
                    publishdeploy()
                }
            )

    }
    if (params.Build_MyTetraPak) {
            packageName = "tetrapak-customerhub.complete"
            repoName = "tetrapak-customerhub"                
            fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
            devartifactdownload()
            parallel (  
                "Author MyTetrapak" : {                                  
                    authordeploy()
                },
                "Publisher MyTetrapak" : {                                    
                    publishdeploy() 
                }
            )                           
    }
	if (params.Build_Supplierportal) {
        packageName = "tetrapak-supplierportal.complete"
        repoName = "tetrapak-supplierportal"
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownload()
        parallel (
            "Author Supplierportal" : {
                authordeploy()
            },
            "Publisher Supplierportal" : {
                publishdeploy()
            }
        )
    }

    if (params.Build_Publicweb) {
        packageName = "tetrapak-publicweb.complete"
        repoName = "tetrapak-publicweb"                
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownload()
        parallel (    
            "Author PublicWeb" : {                                    
                authordeploy()
            },
            "Publisher PublicWeb" : {                     
                publishdeploy()  
            }
        )
    }
	if (params.Build_Tetralaval)  {
        packageName = "tetrapak-tetralaval.all"
        repoName = "tetrapak-tetralaval"
        fileName = "1.0.0-DEV${build_id_number}-SNAPSHOT"
        devartifactdownloadlaval()
        parallel (
            "Author tetra-laval" : {
                authordeploy()
            },
            "Publisher tetra-laval" : {
                publishdeploy()
            }
        )
    }
}
    
def devartifactdownload() {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
    {
        sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
        echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
    }
}

def authordeploy() {    
    sh label: 'Uninstalling Old Package on author', script: "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'   && sleep 60"
    sh label: 'Deleting Old Package on author', script: "curl -k -u ${username}:${password} -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}'   && sleep 60"
    sh label: 'Uploading New Package on author', script: "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${author_url}/crx/packmgr/service.jsp?cmd=upload' --verbose   && sleep 60"
    sh label: 'Installing New Package on author', script: "curl -k -u ${username}:${password} -F force=true  '${author_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'  && sleep 60"
}

def publishdeploy() {   
    sh label: 'Uninstalling Old Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=uninst&name=${packageName}&group=${repoName}'  && sleep 60"
    sh label: 'Deleting Old Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=rm&name=${packageName}&group=${repoName}' && sleep 60"
    sh label: 'Uploading New Package on publish', script: "curl -k -u ${username}:${password} -F name=${packageName} -F file=@${packageName}-${fileName}.zip -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=upload' --verbose  && sleep 60"
    sh label: 'Installing New Package on publish', script: "curl -k -u ${username}:${password} -F force=true '${publish_url}/crx/packmgr/service.jsp?cmd=inst&name=${packageName}&group=${repoName}'  && sleep 60"
}

def publishCoverageReport() {
    if (params.Build_MyTetraPak) {
        reportname = "Karma Report - MyTetrapak"
        sh label: "Publising karma Test Report- MyTetrapak", script: "cp -r tetrapak-customerhub/ui.dev/src/coverage customerhub"
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'customerhub', reportFiles: 'index.html', reportName: 'KarmaReport-MyTetraPak', reportTitles: ''])
    }
    if (params.Build_Publicweb) {
        reportname = "Karma Report - Publicweb"
        sh label: "Publising karma Test Report- MyTetrapak", script: "cp -r tetrapak-publicweb/ui.dev/src/coverage publicweb"
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'publicweb', reportFiles: 'index.html', reportName: 'KarmaReport-Publicweb', reportTitles: ''])
    }
}

def cacheflush() {
    build job: 'CFE/CFE-HTTPD-Cache-Flush', parameters: [string(name: 'ENVIRONMENT', value: 'DEV')], wait: true

    build job: 'CFE/CFE-Cdn-Cache', parameters: [string(name: 'Environment', value: 'DEV'), booleanParam(name: 'Publicweb', value: params.Build_Publicweb), booleanParam(name: 'Customerhub', value: params.Build_MyTetraPak), booleanParam(name: 'Brandsource', value: false), booleanParam(name: 'Tetralaval', value: params.Build_Tetralaval), booleanParam(name: 'Supplierportal', value: params.Build_Supplierportal)], wait: true       
}

def sonarreport() {
    echo "Publishing Sonar report"
    sh 'mkdir -p reports'
    sh 'chmod -R 777 reports'
    sh 'echo "<html> <br /> <p style="font-size:30px"> <a href="https://sonarcloud.io/organizations/tetrapak-smartsales/projects" target="_top">Sonarcloud Report</a> <br /> </p> </html>" > reports/sonarreport.html'
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'reports', reportFiles: 'sonarreport.html', reportName: 'SonarCloud Report', reportTitles: ''])
}

def devartifactdownloadlaval() {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'tetrapak-artifactory-publish-creds', usernameVariable: 'artifactuser', passwordVariable: 'artifactpassword']])
    {
        sh "curl -LO -k -k -u ${artifactuser}:${artifactpassword} https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
        echo "https://tetrapak.jfrog.io/tetrapak/libs-snapshot-local/${repoName}/${packageName}/${fileName}/${packageName}-${fileName}.zip"
    }
}

def notifyBuildStatus() {
    switch (currentBuild.result) {
        case "SUCCESS":
            message = "${currentBuild.fullDisplayName} - build and deploy status - **SUCCESS**."
            facts = [[name: "Build Version", template: "1.0.0-DEV${build_id_number}-SNAPSHOT"],
                        [name: "Completed In", template: "${currentBuild.durationString.minus(' and counting')}"]]
            color = "33cc33"
            break
        case "FAILURE":
            message = "${currentBuild.fullDisplayName} failed with ERROR !!"
            facts = [[name: "Workspace", template: "${env.WORKSPACE}"]]
            color = "ff0000"
            break
        case "UNSTABLE":
            message = "${currentBuild.fullDisplayName} completed successfully but generated few warnings."
            facts =  [[name: "Build Version", template: "1.0.0-DEV${build_id_number}-SNAPSHOT"],
                        [name: "Completed In", template: "${currentBuild.durationString.minus(' and counting')}"],
                        [name: "Workspace", template: "${env.WORKSPACE}"]]
            color = "ffcc00"
            break
        default:
            message = "${currentBuild.fullDisplayName} - Not Built or Aborted."
            facts = []
            color = "b3b3b3"
            break
        }
    facts << [name: "Build URL", template: "${currentBuild.absoluteUrl}"]
    office365ConnectorSend webhookUrl: "https://tetrapak.webhook.office.com/webhookb2/53b8ede5-b02a-49e6-9ed1-5086cb59ca39@d2d2794a-61cc-4823-9690-8e288fd554cc/IncomingWebhook/178ca49866bd49ffa589e2339c07fe64/fa27bbed-fdda-4ecd-97e8-d8f572ab24d1",
            message: message,
            factDefinitions: facts
            color: color
}